ref(참조자)

어떠한 변수를 다른 명으로 부를 수있게 해주는것(같은거에 이름 두개)
//상수도 참조할수 있다 const를 주면 된다 -> 상수를 참조하는 이유는 임시공간 할당해서 저장


포인터도 참조자가 참조가능

함수오버로딩 ->인자의 갯수와 함수가 맞아야한다


디폴트 매개변수

정수 넘기기로 햇는데 안넘기면 어떠한값을 기본값으로 갖겠다! / 뭔가를 대신하기 위한 기본값
-> 디폴트 인자값은 반드시 선언부에 둔다 + 디폴트인자는 줄꺼면 마지막부터

동적메모리 할당 및 반환
할당된 heap 메모리 삭제가 delete

동적메모리 할당은 
참조자로 받으면 직접 메모리에 엑세스 할수잇다

구조체 변수가 구조체 맴버를 가르킬때에는   .  부호 사용
구조체 포인터 변수가 구조체 멤버를 가르킬때에는  -> 부호 사용






객체지향 프로그램
 -  실세계 존재하는 사물에 대한 소프트웨어적인 표현 (ex. 자동차 , 사람 등)
 - 객체(object) : 정보 관리 하기 위해 의미를 부여 하고 분류하는 단위

객체지향 
 ①class : 설계도
 ②object : 설계도의 완성품
 ③정보은닉 : 객체간에 약속안된거 숨기는거 / 유저한테 필요한거만 보이게 하고 복잡한 코딩은 숨기고 접근하지 못하게 하는것
 ④캡슐화 : 숨기고 접근하지 못하게 하는 방법을 칭한다
 ⑤상속 : 상위 클래스에 종속된 하위 클래스  정도..? 이건 알잖아 지웅아 
 ⑥다형성 : 서로 다른것에 동일하게 명령을 내리는것 ex) 부모한테 명령하면 자식들이 동일하게 명령에 따르는것을 생각하면됨

 C++ 구조체 문제 : 구조체는 관련된 데이터를 담을수 있다. 그러나 데이터를 조작하여 결과를 우너하는 함수를 따로 구현해야한다.
                        관련된 함수들을 하나의 부류로 인정해 주어 자료형을 만든다.

new 가 없으면 stack 에 쌓인다

구조체의 유용성
 - 자료형 하나로 묶을수 있다.
 - 정의 자료형도 기본형과 동일시 해라 기본형 자료형으로 인식해주지 ㅇ낳음

클래스 = 멤버변수(특성) + 멤버함수(방법)
 -> 변수가 아니라 객체  =>추상화된 데이터를 자료형으로 정의하여 새로운 자료형을 정의하는 것
            ex)
class Circle
{
public:
	int radius;
	int GetRadius()
	{
		return radius;
	}
	double GetArea()
	{
		return radius * radius * 3.15;
	}
};


오브젝트 : 클래스로 변수를 생성하는것 그것을 객체변수라고 한다. -> 객체가 메모리에 할당
             하나의 클래스에서 여러개의 객체 생성가능



클래스 밖에서 할때는 안에 선언을 해주고 ::으로 클래스 안에 포함되는 하위클래스임을 표시해줘야한다, 원래 밖에다 한다.
ex)
class Circle
{
public:
	int radius;
	int GetRadius()
	{
		return radius;
	}
	double GetArea();
};

double Circle :: GetArea()
{
	return radius * radius * 3.15;
}

클래스 권한 지정의 종류
 - private 기본값
 - public 클래스의 부피가 커지는걸 막기위에 선언와 정의를 분리한 방법
 - protected : 상속이 나와야 사용가능

클래스 선언할때 맴버 변수 설정할때는 private, 그리고 나머지 전부 public


정보은닉 :  멤버 변수에 직접 접근하는거 막는게 정보은닉 -> 굳이 private해서 멤버 만드는 이유?

캡슐화 : 관련 함수를 다른 클레스가 아닌 같은 클래스에 묶는것 ( 어지간해서 같은 함수 쓸꺼면 같은 클래스에 써라 안그럼 캡슐화 위반이다)



생성자 : 객체가 생성될때 객체가 필요한 초기화를 위해 (생성자  = 매서드)
  	①리턴타입, void 불가
	②객체 생성시 한번만 호출  -> 객체는 생성과 동시에 생성자 호출
	③클래스 이름과 동일 , 한 클래스 내에 여러개 가능
 	④객체마다 생성자 샐행
	⑤중복가능
	⑥선언 안했으면 자동생성(빈괄호 생성자가 호출됨)  -> 기존의 다른 생성자가 없어야 디폴트 생성자가 호출된다
           	⑦Circle() : Circle(5)         ->   이웃 생성자 호출 : 생성자 중 인자를 사용할 오버로딩된 메서드 호출하고 돌아와서 본인도 호출함
	⑧Circle(int r)  : radius(r)   ->   : (콜론) 초기화, 생성자만 사용가능 모든 메서드에 사용하지 못한다

   생성자 ex)
	class Circle //클래스 선언부
	{
	private:

	int radius = 0 ;   // private에 초기화 가능 (잘안한다)

	public:
	Circle()   //디폴트 생성자 호출 : 기존의 다른 생성자가 없어야 디폴트 생성자가 호출된다 다른 생성자 있으면 이렇게 직접 작성해라
	{
		cout << "Circle()" << endl;

	}

	Circle() : Circle(5)  //이웃 생성자 호출 : 생성자 중 인자를 사용할 오버로딩된 메서드 호출하고 돌아와서 본인도 호출함
	{
		cout << "Circle()" << endl;

	}

	Circle(int r)  : radius(r)   //  : (콜론) 초기화, 생성자만 사용가능 모든 메서드에 사용하지 못한다
	{
		cout << "Circle(int r)" << endl;
		//radius = r;  -> 콜론 초기화랑 같은 역할
	}

	int getRadius(){return radius;}
	};